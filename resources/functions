# helper functions

blue=$(tput setaf 4)
green=$(tput setaf 2)
red=$(tput setaf 1)
normal=$(tput sgr0)

title() {
  DIR=$(dirname "${BASH_SOURCE[0]}")
  cat ${DIR}/title
}

h1 () {
  printf "\r ====================================\n"
  printf "\r $1\n"
  printf "\r ====================================\n"
}

h2 () {
  printf "\r ===> $1\n"
}

info () {
  printf "\r  [ ${blue}..${normal} ] $1\n"
}

success () {
  printf "\r\033[A\033[2K  [ ${green}OK${normal} ] $1\n"
}

fail () {
  printf "\r\033[A\033[2K  [${red}FAIL${normal}] $1\n"
  exit
}

run () {
  find . -mindepth 2 -name $1 | while read installer ; do bash ${installer} ; done
}

add_repos () {
  h2 "adding repositories"
  find $PWD -name '*.repo' | while read repo ; do bash ${repo} ; done
}

install_packages () {
  h2 "installing packages from package.list"
  for i in $( sed 's/#.*//' package.list ); do
    info $i
    sudo apt -y install $i &>> log &&
      success $i ||
        fail $i
  done
}

dl_deb () {
  h2 "downloading .deb from download.list"
  mkdir temp
  for i in $( sed 's/#.*//' download.list ); do
    info $(basename $i)
    wget --directory-prefix=temp $i &>> log &&
      success $(basename $i) ||
        fail $(basename $i)
  done
}

install_deb () {
  h2 "installing packages from download.list"
  for i in $( ls $PWD/temp/* ); do
    info $(basename $i)
    sudo gdebi --n $i &>> log &&
      success $(basename $i) ||
        fail $(basename $i)
  done

  rm -rf temp
}

install_dotfiles () {
  h2 "installing dotfiles"
  for src in $(find $PWD -name '*.symlink')
  do
    dst="$HOME/$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

link_file () {
  src=$1
  dst=$2

  # check if file already exists and backup
  if [ -f "$dst" ]
  then
    info "backing up $dst"
    mv "$dst" "${dst}.backup" &&
      success "moved $dst to ${dst}.backup" ||
        fail "faild to backup $dst"
  fi

  # creat symlink
  info "linking $src"
  ln -s "$src" "$dst" &&
    success "linked $src to $dst" ||
      fail "error linking $src to $dst"
}

update_and_upgrade () {
  # https://raymii.org/s/tutorials/Silent-automatic-apt-get-upgrade.html
  info "update"
  sudo apt-get update &>> log &&
    sudo DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical apt-get -q -y -o "Dpkg::Options::=--force-confdef" -o "Dpkg::Options::=--force-confold" dist-upgrade &>> log &&
      success "update" ||
        fail "update"
}

get_sudo() {
  # https://gist.github.com/cowboy/3118588
  sudo -v
  while true; do
    sudo -n true
    sleep 60
    kill -0 "$$" || exit
  done &> /dev/null &
}
